#!/bin/bash


echo "loading: .syslib/gitops"


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


clone_default_repos () {
   echo_call

   local buff_on_err2
   local clone_repo_error
   echo_dbg "GBL_INSTALL_FLD: ${GBL_INSTALL_FLD}"
   echo_dbg "CWD: $(pwd)"
   cd "${CONF_INSTALL_PATH}/github"
   echo_dbg "CWD: $(pwd)"

   echo ""
   for repo_url in ${GH_REPOS[@]}; do
      clone_repo "$repo_url"
      clone_repo_error=$?
      echo_dbg "clone-repo-error/ $clone_repo_error"
      # -- -- --
      if (( clone_repo_error == 2 )); then
         sync_repo "$repo_url"
      fi
   done

   echo_call_end
   return 0

}


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


clone_custom_repos () {
   echo_call

   local clone_repo_error

   echo ""
   while read -r repoln && [ -n "$repoln" ] && [[ "$repoln" == https://* ]]; do
      echo_dbg "${TAB2}custom-repo-url:${TAB4}${repoln}"
      clone_repo "$repoln"
      clone_repo_error=$?
      echo_dbg "clone-repo-error/ $clone_repo_error"
      if (( clone_repo_error == 2 )); then
         sync_repo "$repoln"
      fi
   done < "${GLB_CUSTOM_REPOS_PATH}"

   echo_call_end
   return 0

}


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


clone_repo () {
   echo_call

   if [ -z "$GLB_GTOKEN" ]; then
      echo_neg "GLB_GTOKEN_IS_EMPTY"
      exit 1
   else
      echo_dbg "GLB_GTOKEN: ${GLB_GTOKEN}"
   fi

   local REPOURL
   REPOURL=$1
   echo_dbg "checking: ${REPOURL}"
   if [[ "$REPOURL" != https://github.com* ]]; then
      echo_warning "BAD-URL: ${REPOURL}"
      return 0
   fi

   local OLD_HTTPS
   local NEW_HTTPS
   local TOKEN_URL

   OLD_HTTPS="https://github.com"
   NEW_HTTPS="https://${GLB_GTOKEN}@github.com"
   TOKEN_URL="${REPOURL/$OLD_HTTPS/$NEW_HTTPS}"

   echo_dbg "TOKEN-URL: ${TOKEN_URL}"
   echo_dbg "CWD: $(pwd)"

   # shellcheck disable=SC2001
   local err_code
   local err_msg

   gry_block
   err_msg=$(git clone "${TOKEN_URL}" 2>&1)
   err_code=$?
   gry_block_end

   if (( err_code == 0 )); then
      echo_pos "[ ERR: $err_code | OK_CLONING_REPO: ${REPOURL} ]"
   elif (( err_code != 0 )) && (( err_code == 128 )); then
      echo_warning "repo-exists!"
      echo_dbg "err-msg/ $err_msg"
      echo_dbg "repo-sync/ $REPOURL"
      buff_on_err2="$err_msg"
      return 2
   else
      echo_neg "[ ERR: $err_code | ERROR_CLONING_REPO: ${REPOURL} ]"
      return 4
   fi

   echo_call_end
   return 0

}


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


sync_repo () {
   echo_call

   local repo
   repo=$1

   echo_dbg "cwd-pwd: $(pwd)"
   echo_dbg "repo: $repo"

   local tmpbuff
   local repofld
   tmpbuff="${repo/"https://github.com/iotech-systems/"/""}"
   repofld="${tmpbuff/".git"/""}"
   echo_dbg "repofld: $repofld"
   cd $repofld
   echo_dbg "cwd: $(pwd)"

   gry_block
   git remote -v
   git pull -f
   gry_block_end
   sleep 1
   cd ..
   echo_dbg "cwd: $(pwd)"

   echo_call_end
   return 0

}


echo "load: OK"
