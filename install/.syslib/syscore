#!/bin/bash


echo "loading: .syslib/syscore"


is_py_ver_installed () {
   echo_call "is_py_ver_installed"
   # -- -- --

   local py_ver
   py_ver=$1

   echo_dbg "checking for: $py_ver"

   buff=$(which "$py_ver")
   echo_dbg "which/buff: $buff"
   if [[ "$buff" == "" ]]; then
      return 1
   fi

   buff=$($py_ver --version)
   echo_dbg "version: $buff"

   echo ""
   return 0

}


setup_py_venv () {
   echo_call "setup_py_venv"
   # -- -- --
   
   local py_ver
   py_ver=$1 
   
   local py_ver_fld
   py_ver_fld=$2

   echo_dbg "cwd: $(pwd)"

   echo_dbg "installing venv: $py_ver in $py_ver_fld"
   "$py_ver" -m venv "$py_ver_fld"

   echo ""
   return 0

}


pip_install_py_venv () {
   echo_call "pip_install_py_venv"
   # -- -- --

   local buff0
   buff0=$(which python3)
   echo_dbg "$buff0"

   local buff1
   buff1=$(which pip3)
   echo_dbg "$buff1"

   local pip_error
   echo_dbg "cwd: $(pwd)"
   echo_dbg "start-dir: $START_FLD"
   cd "$START_FLD" || exit 1
   echo_dbg "cwd: $(pwd)"
   echo -e "\e[0;90m"
   pip3 install -r "$PIP_INSTALL_FLD"
   echo -e "\e[0;0m"
   pip_error=$?


   echo ""
   return 0

}


check_venv_py_ver () {
   echo_call "check_venv_py_ver"
   # -- -- --

   [[ "$1" == "" ]] && echo_neg "missing arg1"

   local py_venv_fld
   py_venv_fld=$1
   echo_dbg "checking_path: $py_venv_fld"
   
   local activate_path
   activate_path="$py_venv_fld/bin/activate"
   echo_dbg "path_found: $activate_path"

   if [[ ! -f "$activate_path" ]]; then 
      echo_neg "path_not_found: $activate_path"
      return 1
   fi

   local source_err
   source "$py_venv_fld/bin/activate"
   source_err=$?
   if (( source_err != 0 )); then
      echo_neg "source_err: $source_err"
      return 2
   fi

   local buff0
   buff0=$(whereis python3)
   echo_dbg "WHEREIS ( python3 ):"
   for l in $buff0; do
      echo_dbg "  -> $l"
   done

   local buff1
   buff1=$(which python3)
   echo_dbg "WHICH ( python3 ):"
   echo_dbg "  -> $buff1"

   echo ""
   return 0

}


# ---
# "$PY_VENV_VER_SETUP" "$PY_VENV_FOLDER"
create_py_venv () {
   echo_call "create_py_venv"
   # -- -- -

   local py_version
   py_version=$1

   local py_venv_fld
   py_venv_fld=$2

   echo_dbg "cwd: $(pwd)"
   echo_dbg "installing py_venv: $py_version / $py_venv_fld"


   local py_ver_err_code
   is_py_ver_installed "$py_version"
   py_ver_err_code=$?
   if (( py_ver_err_code != 0 )); then
      echo_neg "Your system is missing needed version of PYTHON / $py_version"
      echo_dbg "Please install needed version of PYTHON on your system: $py_version"
      exit 1
   else 
      echo_pos "Good SYSTEM python version found: $py_version"
   fi

   local py_venv_fld_path
   py_venv_fld_path="$PY_VENVS_ROOT/$py_venv_fld"
   if [[ -d "$py_venv_fld_path" ]]; then 
      echo_pos "[[ VENV_FOLDER_FOUND: $py_venv_fld_path ]]"
      local err_code
      check_venv_py_ver "$py_venv_fld_path"
      err_code=$?
      if (( err_code != 0 )); then
         echo_dbg "[ REINSTALLING VENV: $py_version ]"
         setup_py_venv "$py_version" "$py_venv_fld_path"
         check_venv_py_ver "$py_venv_fld_path"
      fi
   else 
      echo_neg "[[ VENV_FOLDER_NOT_FOUND ]]"
      mkdir "$py_venv_fld_path" -p
      setup_py_venv "$py_version" "$py_venv_fld_path"
      check_venv_py_ver "$py_venv_fld_path"
   fi


   return 0

}


clone_repo () {
   echo_call "clone_repo"
   # -- -- --

   repo_url=$(echo "$2" | sed "s/TOKEN/$1/")

   echo_dbg "   gtoken: $1"
   echo_dbg "   repo-url: $repo_url"
   echo_dbg "   cwd: $(pwd)"

   # shellcheck disable=SC2001
   # echo -e "   ${BLU}$repo_url${ECLR}"
   local err_code
   echo -e "${GRY}"
   git clone "$repo_url"
   err_code=$?
   if (( err_code == 0 )); then
      echo_pos "[ ERR: $err_code | OK_CLONING_REPO: $repo_url ]"
   elif (( err_code != 0 )) && (( err_code == 128 )); then
      echo_warning "[ ERR: $err_code | ERROR_CLONING_REPO: $repo_url ]"
   else
      echo_neg "[ ERR: $err_code | ERROR_CLONING_REPO: $repo_url ]"
   fi

   echo -e "${ECLR}"
   return 0

}


clone_repos () {
   echo_call "clone_reps"
   # -- -- --

   echo_dbg "   gtoken: $1"
   echo_dbg "   cwd: $(pwd)"

   echo "" && echo ""
   echo_pos "[ INSTALLING_CORE_REPOS ]"
   for repo in ${GH_REPOS[@]}
   do
      clone_repo $1 "$repo"
   done

   echo "" && echo ""
   echo_pos "[ INSTALLING_CUSTOM_REPOS ]"
   for repo in ${GH_CUSTOM_REPOS[@]}
   do
      clone_repo $1 "$repo"
   done


   echo ""
   return 0

}


sync_repo () {

   echo "" && echo -e " ${BLDBLU}(( pull_repo ))${ECLR}"
   echo "   token: $1"
   echo "   url: $2"
   echo "   cwd: $(pwd)"

   for fl in . ; do
      echo "f: $fl"
   done


   echo "" 
   return 0

}


echo "load: OK"
