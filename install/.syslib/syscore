#!/bin/bash


echo "loading: .syslib/syscore"


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

iotech_hdr () {
   echo ""
   toilet -t -f smblock --filter border:metal "${TAB4}iotech.systems SIMeng${TAB4}"
   echo ""
   sleep 2
   return 0
}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

del_previous_install () {
   echo_call

   echo_dbg "CONF_INSTALL_PATH: $CONF_INSTALL_PATH"
   rm -r "$CONF_INSTALL_PATH" || echo_neg "UNABLE_TO_REMOVE: ${CONF_INSTALL_PATH}"
   if [ -d "$CONF_INSTALL_PATH" ]; then
      echo_neg "UNABLE_TO_REMOVE: $CONF_INSTALL_PATH"
   else
      echo_pos "REMOVED: $CONF_INSTALL_PATH"
   fi

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

store_customs () {
   echo_call

   local tmp=""

   # -- -- keyid -- --
   local keyid_file
   keyid_file="${CONF_INSTALL_PATH}/custom/keyid"
   echo_dbg "loading: ${keyid_file}"
   if [[ -f "${keyid_file}" ]]; then
      tmp=$(cat "$keyid_file")
      GBL_TMP_KEYID="${tmp#[$'\r\t\n ']}"
      [ -z "$GBL_TMP_KEYID" ] && echo_neg "keyid file must be updated"
      echo_dbg "GBL_TMP_KEYID: $GBL_TMP_KEYID" && echo ""
   else
      echo_pnf "${keyid_file}"
   fi

   # -- -- gtoken -- --
   local token_file
   token_file="${CONF_INSTALL_PATH}/custom/gtoken"
   echo_dbg "loading: ${token_file}"
   if [[ -f "${token_file}" ]]; then
      tmp=$(cat $token_file)
      GBL_TMP_GTOKEN="${tmp#[$'\r\t\n ']}"
      [ -z "$GBL_TMP_GTOKEN" ] && echo_neg "gtoken file must be updated"
      echo_dbg "GBL_TMP_GTOKEN: $GBL_TMP_GTOKEN" && echo ""
   else
      echo_pnf "${token_file}"
   fi

   # -- -- repos -- --
   local repos_file
   repos_file="${CONF_INSTALL_PATH}/custom/repos"
   echo_dbg "loading: ${repos_file}"
   if [[ -f "${repos_file}" ]]; then
      tmp=$(cat $repos_file)
      GBL_TMP_REPOS="${tmp#[$'\r\t\n ']}"
      [ -z "$GBL_TMP_REPOS" ] && echo_neg "repos file must be updated"
      echo_dbg "GBL_TMP_REPOS: $GBL_TMP_REPOS" && echo ""
   else
      echo_pnf "${repos_file}"
   fi

   # -- -- simslib-path -- --
   local simslib_path
   simslib_path="${CONF_INSTALL_PATH}/custom/simslib-path"
   echo_dbg "loading: ${simslib_path}"
   if [[ -f "${simslib_path}" ]]; then
      tmp=$(cat $simslib_path)
      GBL_TMP_SIMSLIB="${tmp#[$'\r\t\n ']}"
      [ -z "$GBL_TMP_SIMSLIB" ] && echo_neg "simslib-path file must be updated"
      echo_dbg "GBL_TMP_SIMSLIB: $GBL_TMP_SIMSLIB" && echo ""
   else
      echo_pnf "${simslib_path}"
   fi

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

run_preinstall () {
   echo_call

   CONF_INSTALL_PATH=$(cat conf/install-path)
   echo_dbg "CONF_INSTALL_PATH: $CONF_INSTALL_PATH"

   local error_code
   error_code=-1

   if [ -d "$CONF_INSTALL_PATH" ]; then
      echo_warning "[ Previous installation detected ]"
      read -r -p "${TAB8}Reinstall? (y/n): " ans
      case "$ans" in
         "Y" | "y")
            store_customs
            del_previous_install
            error_code=$?
            if (( err_code == 0 )); then
               #run_install
               return 0
            else
               echo_neg "[ del_previous_install: ${error_code} ]"
            fi
         ;;
         *)
            exit 0
         ;;
      esac
      exit 0
   else
      read -r -p "${TAB4}Press (y/Y) to continue: " ans
      case "$ans" in
         "Y" | "y")
            #run_install
            return 0
         ;;
         *)
            exit 0
         ;;
      esac
      # mkdir "$CONF_INSTALL_PATH" || true && echo "DIR-MADE: $CONF_INSTALL_PATH"
   fi

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

run_install () {
   echo_call

   # create sims folder
   mkdir "${CONF_INSTALL_PATH}" -p
   if [ "${CONF_INSTALL_PATH}" ]; then
      echo_pos "INSTALL_PATH_CREATED: ${CONF_INSTALL_PATH}"
   fi
   # -- -- subfolders -- --
   mkdir "${CONF_INSTALL_PATH}/logs" -p
   mkdir "${CONF_INSTALL_PATH}/data" -p
   mkdir "${CONF_INSTALL_PATH}/custom" -p
   mkdir "${CONF_INSTALL_PATH}/github" -p
   mkdir "${CONF_INSTALL_PATH}/pyvenvs" -p
   # -- -- files -- --
   touch "${CONF_INSTALL_PATH}/custom/gtoken"
   echo "${GBL_TMP_REPOS}" > "${CONF_INSTALL_PATH}/custom/repos"
   echo "${GBL_TMP_KEYID}" > "${CONF_INSTALL_PATH}/custom/keyid"
   echo "${GBL_TMP_GTOKEN}" > "${CONF_INSTALL_PATH}/custom/gtoken"
   echo "${GBL_TMP_SIMSLIB}" > "${CONF_INSTALL_PATH}/custom/simslib-path"
   # -- -- file settings -- --
   chown nobody:nogroup -R "${CONF_INSTALL_PATH}"
   chmod -R 777 "${CONF_INSTALL_PATH}"
   # -- -- --
   gry_block
   ls "${CONF_INSTALL_PATH}" -lh
   gry_block_end
   # -- -- --
   echo "OK" > "${CONF_INSTALL_PATH}/logs/pre-install-msg"

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

set_install_path () {
   echo_call

   local install_path
   local conf_path_file="conf/install-path"

   install_path=$(cat "$conf_path_file")
   if [ -n "$install_path" ]; then
      echo_dbg "SET: install-path/ := $install_path"
   elif [ -n "$CONF_DEFAULT_INSTALL_PATH" ]; then
      echo_dbg "SET: install-apth/ := CONF_DEFAULT_INSTALL_PATH"
      install_path=$CONF_DEFAULT_INSTALL_PATH
      echo_dbg "SET: install-path/ := $install_path"
   fi

   echo_dbg "install-path: ${install_path}"
   read -r -p "${TAB4}install in [ ${install_path} ] (y/n): " ans
   case $ans in
      "Y" | "y")
         echo "$install_path" > "$conf_path_file"
         echo_call_end
         return 0
      ;;
      "N" | "n")
         read -r -p "${TAB4}enter path: " ans
         echo_dbg "new path: ${ans}"
         echo "$ans" > "$conf_path_file"
         echo_call_end
         return 0
      ;;
      *)
         echo_dbg "BAD_INPUT: ${ans}"
      ;;
   esac

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

check_custom_folder () {
   echo_call

   GLB_CUSTOM_FOLDER="${CONF_INSTALL_PATH}/custom"
   if [ ! -d "${GLB_CUSTOM_FOLDER}" ]; then
      echo_pnf "${GLB_CUSTOM_FOLDER}"
      exit 1
   else
      echo_pok "${GLB_CUSTOM_FOLDER}"
      gry_block
      ls "${GLB_CUSTOM_FOLDER}" -lh
      gry_block_end
   fi

   echo_hdr "KEYID"
   # -- -- keyid -- --
   local keyid_file
   keyid_file="${GLB_CUSTOM_FOLDER}/keyid"
   echo_dbg "checking: ${keyid_file}"
   if [[ ! -a "${keyid_file}" ]]; then
      echo_pnf "${keyid_file}" && echo ""
      echo_info "Please create [ ${keyid_file} ] file with SYSTEM KEYID."
      exit 1
   else
      echo_pok "${keyid_file}"
   fi

   GLB_KEYID=$(cat "${keyid_file}")
   echo_dbg "GLB_KEYID: $GLB_KEYID"
   if [ -z $GLB_KEYID ]; then
      echo_neg "GLB_KEYID_IS_EMPTY" && echo ""
      echo_info "Please insert SYSTEM KEYID [ ${keyid_file} ] file."
      exit 1
   fi

   echo_hdr "GTOKEN"
   # -- -- gtoken file -- --
   local token_file
   token_file="${GLB_CUSTOM_FOLDER}/gtoken"
   echo_dbg "checking: ${token_file}"
   if [[ ! -a "${token_file}" ]]; then
      echo_pnf "${token_file}" && echo ""
      echo_info "Please create [ ${token_file} ] file with github PAT token."
      exit 1
   else
      echo_pok "${token_file}"
   fi

   GLB_GTOKEN=$(cat "${token_file}")
   echo_dbg "GLB_GTOKEN: $GLB_GTOKEN"
   if [ -z $GLB_GTOKEN ]; then
      echo_neg "GLB_GTOKEN_IS_EMPTY" && echo ""
      echo_info "Please insert github PAT token into [ ${token_file} ] file."
      exit 1
   fi

   echo_hdr "REPOS"
   # -- -- repos file -- --
   GLB_CUSTOM_REPOS_PATH="${GLB_CUSTOM_FOLDER}/repos"
   echo_dbg "checking: ${GLB_CUSTOM_REPOS_PATH}"
   if [[ ! -a "${GLB_CUSTOM_REPOS_PATH}" ]]; then
      echo_pnf "${GLB_CUSTOM_REPOS_PATH}" && echo ""
      echo_info "Please create [ ${GLB_CUSTOM_REPOS_PATH} ] file.\n${TAB4}if you have custom repos please insert them the 1 per line."
      exit 1
   else
      echo_pok "${GLB_CUSTOM_REPOS_PATH}"
   fi

   GLB_CUSTOM_REPOS=$(cat "${GLB_CUSTOM_REPOS_PATH}")
   if [ -z "$GLB_CUSTOM_REPOS" ]; then
      echo_warning "GLB_CUSTOM_REPOS_IS_EMPTY" && echo ""
   else
      while read -r fln && [ -n "$fln" ] && [[ "$fln" == https://* ]]; do
      echo_dbg "${TAB2}repo-url:${TAB4}${fln}"
      done < "${GLB_CUSTOM_REPOS_PATH}"
   fi

   echo_hdr "SIMSLIB-PATH"
   # -- -- simslib file -- --
   local simslib_file
   simslib_file="${GLB_CUSTOM_FOLDER}/simslib-path"
   echo_dbg "checking: ${simslib_file}"
   if [[ ! -a "${simslib_file}" ]]; then
      echo_pnf "${simslib_file}" && echo ""
      echo_info "Please create [ ${simslib_file} ] file, with PATH to your sims root folder."
      exit 1
   fi

   GLB_SIMSLIB=$(cat "${simslib_file}")
   if [ ! -d "${GLB_SIMSLIB}" ]; then
      echo_pnf "${GLB_SIMSLIB}"
      exit 1
   else
      echo_pok "${GLB_SIMSLIB}"
      gry_block
      ls "${GLB_SIMSLIB}" -lh
      gry_block_end
   fi

   echo_hdr "SIMSLIB-SIMLINK"
   local _simslib
   _simslib="simslib"
   # symlink to simslib in install folder
   cd "$CONF_INSTALL_PATH"
   if [ ! -d "${_simslib}" ]; then
      ln -s "${GLB_SIMSLIB}" "${_simslib}"
   else
      echo_dbg "symlink-exists: ${_simslib}"
   fi

   gry_block
   ls -lh
   gry_block_end

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

install_simcli () {
   echo_call

   local bash_path
   bash_simcli_path="${CONF_INSTALL_PATH}/github/ue-simcli/bash/simcli"

   # -- -- -- -- -- --
   local lcl_bin
   lcl_bin=$(realpath ~/.local/bin)
   # -- -- -- -- -- --
   cd ${lcl_bin}
   echo "pwd: $(pwd)"
   ln -s "${bash_simcli_path}" simcli -f
   if [ -f "simcli" ]; then
      echo_pos "simcli-installed"
   else
      echo_neg "SIMCLI-INSTALL-ERROR"
   fi

   local lcl
   lcl=$(realpath ~/.local)
   mkdir "${lcl}/etc/simcli" -p
   echo "${CONF_INSTALL_PATH}" > "${lcl}/etc/simcli/install-path"


   echo_call_end
   return 0

}


echo "load: OK"
