#!/bin/bash


echo "loading: .syslib/syscore"


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

check_logs () {
   echo_call
   # -- -- --

   local log_file_pyvenv
   log_file_pyvenv=".logs/py3venv-run"

   if [ ! -f "$log_file_pyvenv" ]; then
      echo_pnf "$log_file_pyvenv"
      echo_call_end
      return 1
   fi

   local fbuff
   fbuff=$(cat "$log_file_pyvenv")
   if [[ "$fbuff" -ne  "PYTHON3-VENV-OK" ]]; then
      echo_dbg "BAD_PY3_VENV_RUN: $buff"
      return 2
   fi

   echo_dbg "PY3_VENV_RUN: $fbuff"
   echo_pos "$fbuff"

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

set_custom_dpad () {
   echo_call
   # -- -- --

   local cust_dpath
   cust_dpath=$(cat conf/custom-dpath)
   echo_dbg "checking cust_dpath: $cust_dpath"

   if [ ! -d "$cust_dpath" ]; then
      echo_pnf "$cust_dpath"
      return 1
   fi

   echo_pok "$cust_dpath"
   GLB_CUST_DPATH="$cust_dpath"

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

set_gtoken () {
   echo_call
   # -- -- --

   local gtoken_file
   gtoken_file="$GLB_CUST_DPATH/gtoken"
   echo_dbg "gtoken-fpath: $gtoken_file"
   if [ ! -f "$gtoken_file" ]; then
      echo_pnf "$gtoken_file"
      exit 1
   fi

   echo_pos "$gtoken_file"
   GTOKEN=$(cat "$gtoken_file")
   echo_dbg "GTOKEN: $GTOKEN"

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

set_github_dpath () {
   echo_call
   # -- -- --

   local github_root
   github_root="$GLB_CUST_DPATH/github-root"
   echo_dbg "checking github_root: $github_root"

   if [ ! -f "$github_root" ]; then
      echo_pnf "$github_root"
      exit 1
   fi

   echo_pos "$github_root"
   GLB_GITHUB_DPATH=$(cat "$github_root")
   echo_dbg "GLB_GITHUB_DPATH: $GLB_GITHUB_DPATH"

   if [ ! -d "$GLB_GITHUB_DPATH" ]; then
      echo_pnf "$GLB_GITHUB_DPATH"
      return 1
   fi

   echo_pok "$GLB_GITHUB_DPATH"

   echo_call_end
   return 0

}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

check_custom_dependencies () {   
   echo_call
   # -- -- --

   # -- -- check custom folder -- --
   local CUST_DPATH
   CUST_DPATH=$(cat conf/custom-dpath)
   echo_dbg "CUST_DPATH: $CUST_DPATH"
   if [ ! -d "$CUST_DPATH" ]; then
      echo_pnf $CUST_DPATH
      exit 1
   else
      echo_pos "$CUST_DPATH"
   fi

   # -- check gtoken file --
   local gtoken_file
   gtoken_file="$CUST_DPATH/gtoken"
   echo_dbg "gtoken-fpath: $gtoken_file"
   if [ ! -f "$gtoken_file" ]; then
      echo_pnf "$gtoken_file"
      exit 1
   else
      echo_pos "$gtoken_file"
      GTOKEN=$(cat "$gtoken_file")
      echo_dbg "GTOKEN: $GTOKEN"
   fi

   # -- check custom repos file --
   local custom_repos_file
   custom_repos_file="$CUST_DPATH/custom-repos"
   echo_dbg "custom-repos-fpath: $custom_repos_file"
   if [ ! -f "$custom_repos_file" ]; then
      echo_pnf "$custom_repos_file"
      exit 1
   else 
      echo_pos "$custom_repos_file"
      source "$custom_repos_file"
      for repo in ${GH_CUSTOM_REPOS[@]}; do
         echo_dbg "repo: $repo"
      done
   fi

   # -- check github root folder --
   local github_root_fld
   github_root_fld="$CUST_DPATH/github-root"
   echo_dbg "github_root_fld: $github_root_fld"
   if [ ! -f "$github_root_fld" ]; then
      echo_pnf "$github_root_fld"
      exit 1
   else 
      echo_pos "$github_root_fld"
      GHROOT=$(cat "$github_root_fld")
      echo_dbg "GHROOT: $GHROOT"
      if [ ! -d "$GHROOT" ]; then
         echo_pnf "$GHROOT"
         exit 1
      else
         echo_pos "$GHROOT"
      fi
   fi

   echo_call_end
   return 0

}



is_py_ver_installed () {
   echo_call
   # -- -- --

   local py_ver
   py_ver=$1

   echo_dbg "checking for: $py_ver"

   buff=$(which "$py_ver")
   echo_dbg "which/buff: $buff"
   if [[ "$buff" == "" ]]; then
      return 1
   fi

   buff=$($py_ver --version)
   echo_dbg "version: $buff"

   echo_call_end
   return 0

}


setup_py_venv () {
   echo_call
   # -- -- --
   
   local py_ver
   py_ver=$1 
   
   local py_ver_fld
   py_ver_fld=$2

   echo_dbg "cwd: $(pwd)"

   echo_dbg "installing venv: $py_ver in $py_ver_fld"
   "$py_ver" -m venv "$py_ver_fld"

   echo_call_end
   return 0

}


pip_install_py_venv () {
   echo_call
   # -- -- --

   local buff0
   buff0=$(which python3)
   echo_dbg "$buff0"

   local buff1
   buff1=$(which pip3)
   echo_dbg "$buff1"

   local pip_error
   echo_dbg "cwd: $(pwd)"
   echo_dbg "start-dir: $START_FLD"
   cd "$START_FLD" || exit 1
   echo_dbg "cwd: $(pwd)"
   echo -e "\e[0;90m"
   pip3 install -r "$PIP_INSTALL_FLD"
   echo -e "\e[0;0m"
   pip_error=$?

   echo_call_end
   return 0

}


check_venv_py_ver () {
   echo_call
   # -- -- --

   [[ "$1" == "" ]] && echo_neg "missing arg1"

   local py_venv_fld
   py_venv_fld=$1
   echo_dbg "checking_path: $py_venv_fld"
   
   local activate_path
   activate_path="$py_venv_fld/bin/activate"
   echo_dbg "path_found: $activate_path"

   if [[ ! -f "$activate_path" ]]; then 
      echo_neg "path_not_found: $activate_path"
      return 1
   fi

   local source_err
   source "$py_venv_fld/bin/activate"
   source_err=$?
   if (( source_err != 0 )); then
      echo_neg "source_err: $source_err"
      return 2
   fi

   local buff0
   buff0=$(whereis python3)
   echo_dbg "WHEREIS ( python3 ):"
   for l in $buff0; do
      echo_dbg "  -> $l"
   done

   local buff1
   buff1=$(which python3)
   echo_dbg "WHICH ( python3 ):"
   echo_dbg "  -> $buff1"

   echo_call_end
   return 0

}


# ---
# "$PY_VENV_VER_SETUP" "$PY_VENV_FOLDER"
create_py_venv () {
   echo_call
   # -- -- -

   local py_version
   py_version=$1

   local py_venv_fld
   py_venv_fld=$2

   echo_dbg "cwd: $(pwd)"
   echo_dbg "installing py_venv: $py_version / $py_venv_fld"


   local py_ver_err_code
   is_py_ver_installed "$py_version"
   py_ver_err_code=$?
   if (( py_ver_err_code != 0 )); then
      echo_neg "Your system is missing needed version of PYTHON / $py_version"
      echo_dbg "Please install needed version of PYTHON on your system: $py_version"
      exit 1
   else 
      echo_pos "Good SYSTEM python version found: $py_version"
   fi

   local py_venv_fld_path
   py_venv_fld_path="$PY_VENVS_ROOT/$py_venv_fld"
   if [[ -d "$py_venv_fld_path" ]]; then 
      echo_pos "[[ VENV_FOLDER_FOUND: $py_venv_fld_path ]]"
      local err_code
      check_venv_py_ver "$py_venv_fld_path"
      err_code=$?
      if (( err_code != 0 )); then
         echo_dbg "[ REINSTALLING VENV: $py_version ]"
         setup_py_venv "$py_version" "$py_venv_fld_path"
         check_venv_py_ver "$py_venv_fld_path"
      fi
   else 
      echo_neg "[[ VENV_FOLDER_NOT_FOUND ]]"
      mkdir "$py_venv_fld_path" -p
      setup_py_venv "$py_version" "$py_venv_fld_path"
      check_venv_py_ver "$py_venv_fld_path"
   fi

   echo_call_end
   return 0

}


clone_repo () {
   echo_call
   # -- -- --

   local gtok
   gtok="$1"
   echo_dbg "   gtoken: $gtok"

   local gurl
   gurl="$2"
   echo_dbg "   gurl: $gurl"


   # test url for keyword TOKEN   
   if [[ "$gurl" =~ .*TOKEN*  ]]; then
      echo_dbg "$gurl"
   else 
      local turl
      turl="https://TOKEN@github.com/iotech-systems/ue-core.git"
      echo_neg "NO_'TOKEN'_IN_REPO_URL: $gurl"
      echo_info "You must add keyword TOKEN to repo URL\n    [ CORRECT-FORMAT: $turl ]"
      echo_info "You must fix this and restart the process!"
      exit 1
   fi

   repo_url=$(echo "$gurl" | sed "s/TOKEN/$gtok/")

   echo_dbg "   repo-url: $repo_url"
   echo_dbg "   cwd: $(pwd)"

   # shellcheck disable=SC2001
   local err_code
   echo -e "${GRY}"
   git clone "$repo_url"
   err_code=$?
   if (( err_code == 0 )); then
      echo_pos "[ ERR: $err_code | OK_CLONING_REPO: $repo_url ]"
   elif (( err_code != 0 )) && (( err_code == 128 )); then
      echo_warning "[ ERR: $err_code | ERROR_CLONING_REPO: $repo_url ]"
   else
      echo_neg "[ ERR: $err_code | ERROR_CLONING_REPO: $repo_url ]"
   fi

   echo -e "${ECLR}"
   echo_call_end
   return 0

}


clone_def_repos () {
   echo_call
   # -- -- --

   echo_dbg "   gtoken: $1"
   echo_dbg "   cwd: $(pwd)"

   echo "" && echo ""
   echo_pos "[ INSTALLING_CORE_REPOS ]"
   for repo in ${GH_REPOS[@]}; do
      clone_repo "$1" "$repo"
   done

   echo_call_end
   return 0

}


clone_cust_repos () {
   echo_call
   # -- -- --
   
   echo_dbg "   gtoken: $1"
   echo_dbg "   cwd: $(pwd)"

   echo "" && echo ""
   echo_pos "[ INSTALLING_CUSTOM_REPOS ]"
   for repo in ${GH_CUSTOM_REPOS[@]}; do
      clone_repo $1 "$repo"
   done

   echo_call_end
   return 0

}


sync_repo () {
   echo_call

   echo "   token: $1"
   echo "   url: $2"
   echo "   cwd: $(pwd)"

   for fl in . ; do
      echo "f: $fl"
   done

   echo_call_end
   return 0

}


echo "load: OK"
