#!/bin/bash


gry_block="echo -e \"\e[0;90m\""
rst_gry="echo -e \"\e[0m\""


clear
echo ""
eval $gry_block
# -- config files --
source conf/github-repos
source conf/setup-ini
# -- code files --
source .syslib/data
source .syslib/utils
source .syslib/syscore
eval $rst_gry


on_exit () {
   echo_call "on_exit"
   echo_dbg " -- setup end -- "
   echo ""
}

trap on_exit EXIT


echo ""
GLB_START_FLDER=$(pwd)
echo_dbg "[ GLB_START_FLDER: $GLB_START_FLDER ]"
echo ""


# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --


if [[ -z "$1" ]]; then

   echo_dbg "[ no custom folder passed to the script; searching in '$(pwd)/conf/custom-dpath' file ]"
   echo_dbg "[ trying: $GLB_CONF_CUSTOM_FOLDER ... ]"

   if [[ ! -f "$GLB_CONF_CUSTOM_FOLDER" ]]; then
      echo_neg "NO_CUSTOM_FOLDER_INFO_FOUND"
      exit 1
   fi

   GLB_CUSTOM_FOLDER=$(cat "$GLB_CONF_CUSTOM_FOLDER")
   echo_dbg "[ GLB_CUSTOM_FOLDER: $GLB_CUSTOM_FOLDER ]"

   if [[ ! -d "$GLB_CUSTOM_FOLDER" ]]; then
      echo_pnf "$GLB_CUSTOM_FOLDER"
      exit 1
   fi

else

   custom_folder_path="$1"
   echo_dbg "[ custom_folder_path: $custom_folder_path ]"

   if [[ ! -d "$custom_folder_path" ]]; then
      echo_pnf "$custom_folder_path"
      echo_neg "[ exiting ... ]"
      exit 1
   else
      echo_pok "$custom_folder_path"
      GLB_CUSTOM_FOLDER="$custom_folder_path"
   fi

fi

eval $gry_block
ls "$GLB_CUSTOM_FOLDER" -la
eval $rst_gry

# -- repos --
GLB_REPOS=$(cat "$GLB_CUSTOM_FOLDER/custom-repos")
echo_dbg "[ GLB_REPOS: $GLB_REPOS ]"
if [[ -z "$GLB_REPOS" ]]; then
   echo_bylw "        -> GLB_REPOS_IS_EMPTY"
fi

# -- github root --
GLB_GITHUB_ROOT=$(cat "$GLB_CUSTOM_FOLDER/github-root")
echo_dbg "[ GLB_GITHUB_ROOT: $GLB_GITHUB_ROOT ]"
if [[ ! -d "$GLB_GITHUB_ROOT" ]]; then
   echo_pnf "$GLB_GITHUB_ROOT"
else
   echo_pok "$GLB_GITHUB_ROOT"
fi

# -- gtoken --
GLB_GTOKEN=$(cat "$GLB_CUSTOM_FOLDER/gtoken")
echo_dbg "[ GLB_GTOKEN: $GLB_GTOKEN ]"
if [[ -z "$GLB_GTOKEN" ]]; then
   echo_bylw "        -> GLB_GTOKEN_IS_EMPTY"
else
   echo_pos "[ GLB_GTOKEN_IS_NOT_EMPTY ]"
fi


# check logs to see if setup was run before
check_logs
err_code=$?
if (( $err_code != 0 )); then
   echo_neg "check-logs-error"
   exit 1
else
   echo_dbg "check-logs-ok"
fi


# check_custom_dependencies
# deps_check_err=$?
# if (( $deps_check_err != 0 )); then
#    echo_neg "ERROR_CHECKING_CUSTOM_DEPENDENCIES"
#    exit 1
# else
#    echo_pos "CHECKING_CUSTOM_DEPENDENCIES_OK"
# fi
#
#
# exit 1
#
# START_FLD=$(pwd)
# cd "$GHROOT" || exit 1
# echo_pos "[ SYSTEM INSTALL FOLDER: $GHROOT ]"


# -- create py venv --
PY_INSTALL_FLD="$GLB_GITHUB_ROOT/$CONF_PY_VENVS_ROOT/$CONF_PY_VENV_FOLDER/"
echo_dbg "PY_VENV_INSTALL_FLD: $PY_INSTALL_FLD"
if [[ ! -d "$PY_INSTALL_FLD" ]]; then
   echo_warning "$PY_INSTALL_FLD"
   mkdir "$PY_INSTALL_FLD" -p
   echo $(pwd)
else
   cd "$PY_INSTALL_FLD" || true
   echo $(pwd)
fi



exit 1

# create_py_venv "$PY_VENV_VER_SETUP" "$PY_VENV_FOLDER"
# py_venv_err=$?
# if (( py_venv_err != 0 )); then
#    echo_neg "UNABLE_TO_INSTALL_PY_VENV: $PY_VENV_VER_SETUP in $PY_VENV_FOLDER"
#    exit 1
# else
#    echo_pos "PY_VENV_INSTALLED: $PY_VENV_VER_SETUP in $PY_VENVS_ROOT/$PY_VENV_FOLDER"
# fi


pip_install_py_venv
pip_err_code=$?


echo_dbg "[ CLONING_GITHUB_REPOS ]"
echo_pos "[ GTOKEN: $GTOKEN ]"
cd "$GHROOT" || exit 1
echo_dbg "$(pwd)"

echo ""
echo_bylw "= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ="
clone_def_repos "$GTOKEN"

echo_bylw "= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ="
clone_cust_repos "$GTOKEN"

echo ""
echo_pos "[ CLONING_GITHUB_REPOS_DONE ]"
echo ""
echo_bylw "= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =" 
echo ""


echo_info "Installing SIMCLI"


PYTHON_PATH="$GHROOT/ue-core"
echo_dbg "[ PYTHON_PATH: $PYTHON_PATH ]"
if [[ ! -d "$PYTHON_PATH" ]]; then
   echo_neg "PYTHON_PATH_NOT_FOUND: $PYTHON_PATH"
else
   export PYTHONPATH="$PYTHON_PATH"
fi

SIM_CLI="$PYTHON_PATH/cli/simcli"
BIN_FLD="$GHROOT/$PY_VENVS_ROOT/$PY_VENV_FOLDER/bin"

echo_dbg "[ BIN_FLD: $BIN_FLD ]"
ln -s "$SIM_CLI" "$BIN_FLD/simcli" -f
echo ""


# write PATH to cli folder into the venv setup
# url: https://www.aocks.com/posts/managing-paths-in-python-virtual-environments/
pth_fld="$GHROOT/$PY_VENVS_ROOT/$PY_VENV_FOLDER/lib/python3.13/site-packages"
[[ ! -d "$pth_fld" ]] && echo_neg "PATH_NOT_FOUND: $pth_fld"

# "/eu-core-cli.pth"
pth_file_path=$pth_fld/eu-core-cli.pth


echo ""
sleep 1
echo_pos "[[ TESTING_SIMCLI: if you see text | iotech.systems - simcli | below -> simcli is installed in VENV ! ]]"
echo -e "$YLW"
simcli --help
echo -e "$ECLR"
echo ""
